- name: Install PostgreSQL and relate packages for RHEL 8
  ansible.builtin.dnf:
    name: "{{ pgsql.packages_list_el_8 }}"
    state: present
  when: ansible_distribution_version is match("8.*")

- name: Install PostgreSQL and relate packages for RHEL 9
  ansible.builtin.dnf:
    name: "{{ pgsql.packages_list_el_9 }}"
    state: present
  when: ansible_distribution_version is match("9.*")

- name: Get path for pg_hba configuration
  ansible.builtin.stat:
    path: "{{ pgsql.pgdata }}/pg_hba.conf"
  register: pgdata_init

- name: Init PostgresQL Db
  ansible.builtin.command:
    cmd: /usr/bin/postgresql-setup initdb
    creates: /var/lib/pgsql/initdb.log
  register: datadir_init
  when:
    - pgdata_init is defined
    - pgdata_init.stat is defined
    - not pgdata_init.stat.exists

- name: Ensures postgresql.service.d/ dir exists
  ansible.builtin.file:
    path: /etc/systemd/system/postgresql.service.d/
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Install workaround systemd config for https://access.redhat.com/solutions/5605181"
  ansible.builtin.template:
    src: postgresql-unit-stop.conf
    dest: /etc/systemd/system/postgresql.service.d/stop.conf
    owner: root
    group: root
    mode: "0644"
  notify:
    - Restart Postgres

- name: Ensure PostgreSQL accept connection from app servers
  ansible.builtin.template:
    src: pg_hba.conf
    dest: /var/lib/pgsql/data/pg_hba.conf
    owner: postgres
    group: postgres
    mode: "0600"
  notify:
    - Restart Postgres

- name: Ensure PostgreSQL accept remote connection
  ansible.builtin.template:
    src: postgresql.conf
    dest: /var/lib/pgsql/data/postgresql.conf
    owner: postgres
    group: postgres
    mode: "0600"
  notify:
    - Restart Postgres

- name: Ensure the PostgreSQL service is running
  ansible.builtin.service:
    name: postgresql
    state: started
    enabled: true
  when: datadir_init is success

- name: Create database {{ pgsql.db.name }}
  community.postgresql.postgresql_db:
    name: "{{ item.name }}"
    encoding: UTF-8
    template: 'template0'
  with_items: "{{ pgsql.db }}"

- name: Create user for database
  community.postgresql.postgresql_user:
    db: "{{ item.name }}"
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    priv: ALL
    state: present
  with_items: "{{ pgsql.db }}"

- name: Open Firewalld for 5432
  ansible.posix.firewalld:
    port: 5432/tcp
    permanent: true
    state: enabled
    immediate: true
